#!/usr/bin/env node
/* eslint-disable */
/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('webInside');
const http = require('http');
const path = require('path');
const fs = require('fs');

const insideClient = require('../interfaceClients/insideClient');
const geniusClient = require('../interfaceClients/geniusClient');
const membershipClient = require('../interfaceClients/membershipClient');
const weixinClient = require('../interfaceClients/weixinClient');
const aliPayClient = require('../interfaceClients/aliPayClient');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);
/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

Promise.all([
    insideClient.initIDL(),
    geniusClient.initIDL(),
    membershipClient.initIDL(),
    weixinClient.initIDL(),
    aliPayClient.initIDL()
]).then(() => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'), 'utf-8'));
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;
    console.log('Listening on ' + bind, 'version', packageJson.version);
}
